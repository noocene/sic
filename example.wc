Void : * = _void,prop: +,:Void * (prop void)

Unit : * = _unit,prop: +,:Unit * +,:(prop new) (prop unit)

new : Unit = /prop \x x

Bool : * =
    _bool, prop: +,:Bool *
        +,:(prop true)
        +,:(prop false)
        (prop bool)

true : Bool =
    /prop \t \f t

false : Bool =
    /prop \t \f f

not : +,:Bool Bool = \x ([x \self Bool] false true)

Nat : * =
    _nat, prop: +,:Nat *
    +,:(prop zero)
    +,:
        +,pred:Nat 
            (prop (succ pred))
    (prop nat)

zero : Nat = /prop \z \s z

succ : +,:Nat Nat = \n /prop \z \s (s n)

List : _,:* * = /A
    _list, prop: +,:[List A] *
    +,:(prop [nil A])
    +,:
        +,head:A
        +,tail:[List A]
        (prop ([cons A] head tail))
    (prop list)

nil : _,A:* [List A] = /A /prop \nil \cons nil

cons : _,A:* +,head:A +,tail:[List A] [List A] = /A \head \tail /prop
    \nil \cons (cons head tail)

typeif : +,A:* +,B:* +,a:Bool * = \A \B \a
    ([a \x *] A B)

if : _,A:* _,B:* +,bool:Bool +,:A +,:B ((typeif A B) bool) = /A /B \bool \a \b 
    ([bool \self ((typeif A B) self)] a b)

id : _,A:* +,a:A A = /A \x x
idt : * = +,:Bool Bool
bid : idt = \x x

a : +,:idt +,:idt idt = \x \y y

dup : _,A:* +,:
        !+,:A A
    !+,:A A = /A \x
    : X = x
    . \a (X (X a))

vnil : +,A:* ((Vect A) zero) =
    \A /P \nil nil

Vect : +,A:* +,size:Nat * =
    \A \size _vect,prop:
        +,size:Nat
        +,:((Vect A) size)
        *
    +,nil:((prop zero) (vnil A))
    ((prop size) vect)

Equal: _,A:* _,a:A _,b:A * =
    /A /a /b
    _self,prop: _,b:A +,:[Equal A a b] *
    +,:([prop a] [refl A a])
    ([prop b] self)

refl: _,A:* _,a:A [Equal A a a] =
    /A /a /prop \refl refl

doublenegation: +,b:Bool [Equal Bool (not (not b)) b] =
    \b (([b \self [Equal Bool (not (not self)) self]]
        [refl Bool true])
        [refl Bool false])

main : (Vect Bool zero) = (vnil Bool)