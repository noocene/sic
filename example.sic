Void : * = _void,prop: +,:Void * (prop void)

Unit : * = _unit,prop: +,:Unit * +,:(prop new) (prop unit)

new : Unit = /prop \x x

Bool : * =
    _bool, prop: +,:Bool *
        +,:(prop true)
        +,:(prop false)
        (prop bool)

true : Bool =
    /prop \t \f t

false : Bool =
    /prop \t \f f

not : +,:Bool Bool = \x ([x \self Bool] false true)

Nat : * =
    _nat, prop: +,:Nat *
    +,:(prop zero)
    +,:
        +,pred:Nat 
            (prop (succ pred))
    (prop nat)

zero : Nat = /prop \z \s z

succ : +,:Nat Nat = \n /prop \z \s (s n)

List : _,:* * = /A
    _list, prop: +,:[List A] *
    +,:(prop [nil A])
    +,:
        +,head:A
        +,tail:[List A]
        (prop ([cons A] head tail))
    (prop list)

nil : _,A:* [List A] = /A /prop \nil \cons nil

cons : _,A:* +,head:A +,tail:[List A] [List A] = /A \head \tail /prop
    \nil \cons (cons head tail)

typeif : _,A:* _,B:* +,a:Bool * = /A /B \a
    ([a \x *] A B)
if : _,A:* _,B:* +,bool:Bool +,:A +,:B ([typeif A B] bool) = /A /B \bool \a \b 
    ([bool \self ([typeif A B] self)] a b)

main : Nat = ([if Bool Nat] false (not true) (succ zero))